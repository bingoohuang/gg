// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:46
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	ins              *Insert
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        TableName
	tableNames       TableNames
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const REPAIR = 57449
const OPTIMIZE = 57450
const TRUNCATE = 57451
const DATABASES = 57452
const TABLES = 57453
const VITESS_KEYSPACES = 57454
const VITESS_SHARDS = 57455
const VSCHEMA_TABLES = 57456
const INTEGER = 57457
const CHARACTER = 57458
const CURRENT_TIMESTAMP = 57459
const DATABASE = 57460
const CURRENT_DATE = 57461
const CURRENT_TIME = 57462
const LOCALTIME = 57463
const LOCALTIMESTAMP = 57464
const UTC_DATE = 57465
const UTC_TIME = 57466
const UTC_TIMESTAMP = 57467
const REPLACE = 57468
const CONVERT = 57469
const CAST = 57470
const GROUP_CONCAT = 57471
const SEPARATOR = 57472
const MATCH = 57473
const AGAINST = 57474
const BOOLEAN = 57475
const LANGUAGE = 57476
const WITH = 57477
const QUERY = 57478
const EXPANSION = 57479
const UNUSED = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 219,
	103, 337,
	-2, 333,
	-1, 220,
	103, 338,
	-2, 334,
	-1, 441,
	5, 21,
	-2, 288,
	-1, 479,
	103, 340,
	-2, 336,
	-1, 587,
	5, 22,
	-2, 170,
	-1, 650,
	5, 22,
	-2, 289,
	-1, 689,
	5, 21,
	-2, 291,
	-1, 733,
	5, 22,
	-2, 292,
}

const yyPrivate = 57344

const yyLast = 3824

var yyAct = [...]int16{
	235, 220, 400, 575, 676, 675, 694, 341, 188, 343,
	321, 345, 214, 576, 539, 613, 42, 620, 272, 542,
	478, 556, 248, 471, 508, 59, 301, 572, 237, 295,
	87, 180, 215, 246, 310, 197, 41, 760, 755, 759,
	86, 750, 758, 754, 679, 749, 46, 711, 225, 483,
	230, 180, 180, 333, 204, 222, 180, 209, 78, 349,
	202, 203, 346, 590, 322, 3, 48, 49, 50, 51,
	532, 602, 533, 589, 216, 39, 541, 604, 532, 180,
	533, 180, 532, 588, 533, 180, 462, 464, 181, 77,
	223, 78, 226, 83, 332, 80, 81, 82, 79, 718,
	629, 187, 390, 391, 700, 653, 250, 412, 213, 624,
	67, 594, 224, 399, 357, 356, 337, 329, 534, 62,
	182, 183, 184, 185, 186, 75, 534, 380, 71, 66,
	534, 358, 355, 370, 358, 227, 380, 228, 229, 535,
	336, 233, 681, 357, 356, 557, 58, 535, 18, 748,
	745, 535, 339, 746, 463, 356, 207, 703, 706, 67,
	358, 334, 603, 557, 601, 636, 39, 630, 62, 544,
	303, 358, 728, 234, 75, 724, 511, 71, 66, 369,
	368, 378, 379, 371, 372, 373, 374, 375, 376, 377,
	370, 340, 39, 380, 231, 58, 373, 374, 375, 376,
	377, 370, 236, 180, 380, 360, 177, 573, 297, 335,
	180, 180, 547, 180, 335, 61, 631, 70, 68, 72,
	648, 232, 515, 180, 645, 64, 59, 308, 180, 59,
	618, 180, 737, 236, 180, 348, 513, 514, 512, 359,
	425, 299, 60, 490, 65, 74, 69, 63, 73, 606,
	607, 608, 43, 357, 356, 177, 595, 488, 298, 306,
	357, 356, 720, 236, 61, 618, 70, 68, 72, 330,
	358, 357, 356, 39, 64, 618, 236, 358, 683, 338,
	18, 583, 493, 437, 347, 652, 236, 350, 358, 618,
	353, 60, 472, 65, 74, 69, 63, 73, 586, 430,
	547, 236, 59, 501, 503, 504, 429, 180, 502, 573,
	180, 180, 180, 180, 585, 207, 308, 236, 18, 352,
	444, 180, 458, 459, 39, 180, 76, 472, 180, 16,
	216, 180, 308, 180, 180, 431, 487, 489, 486, 194,
	59, 470, 473, 688, 427, 428, 480, 477, 180, 479,
	468, 180, 388, 456, 180, 59, 18, 450, 216, 240,
	296, 496, 39, 443, 446, 449, 448, 335, 475, 441,
	445, 757, 447, 491, 192, 201, 271, 198, 199, 439,
	307, 440, 509, 39, 492, 531, 357, 356, 460, 753,
	474, 414, 415, 416, 417, 418, 419, 420, 605, 59,
	39, 548, 308, 358, 484, 497, 178, 494, 570, 546,
	495, 479, 361, 59, 559, 207, 207, 207, 207, 455,
	302, 316, 317, 270, 536, 537, 210, 210, 218, 453,
	207, 210, 569, 300, 454, 554, 451, 561, 207, 238,
	751, 452, 725, 401, 59, 686, 646, 57, 481, 351,
	410, 239, 574, 320, 210, 564, 210, 302, 565, 577,
	210, 587, 216, 195, 196, 568, 189, 460, 582, 731,
	510, 190, 43, 567, 730, 217, 714, 472, 715, 354,
	549, 550, 45, 47, 553, 59, 59, 331, 591, 40,
	1, 84, 597, 319, 666, 324, 465, 593, 560, 325,
	562, 563, 619, 482, 53, 600, 476, 579, 599, 485,
	221, 243, 566, 571, 369, 368, 378, 379, 371, 372,
	373, 374, 375, 376, 377, 370, 498, 499, 380, 505,
	506, 509, 312, 315, 316, 317, 313, 609, 314, 318,
	616, 580, 584, 426, 294, 729, 59, 713, 634, 409,
	627, 628, 555, 249, 632, 500, 260, 257, 259, 638,
	258, 639, 640, 641, 642, 432, 438, 362, 180, 247,
	241, 461, 401, 206, 598, 551, 552, 635, 210, 649,
	650, 651, 304, 311, 309, 210, 327, 212, 210, 205,
	644, 710, 739, 436, 19, 296, 59, 180, 210, 654,
	660, 180, 647, 210, 661, 44, 210, 200, 15, 210,
	14, 13, 12, 11, 10, 9, 8, 617, 669, 510,
	7, 6, 5, 59, 643, 4, 665, 191, 17, 2,
	0, 633, 0, 0, 546, 677, 479, 678, 670, 671,
	674, 0, 592, 0, 0, 673, 0, 180, 344, 0,
	680, 344, 0, 662, 59, 59, 685, 663, 0, 59,
	59, 59, 687, 693, 59, 696, 697, 577, 684, 0,
	698, 0, 0, 0, 0, 701, 702, 0, 707, 708,
	0, 705, 210, 0, 218, 210, 210, 210, 210, 664,
	0, 0, 716, 0, 0, 719, 457, 721, 722, 0,
	210, 0, 59, 466, 0, 0, 469, 577, 210, 210,
	661, 727, 218, 0, 469, 0, 689, 626, 733, 0,
	59, 0, 59, 210, 433, 736, 210, 637, 732, 210,
	738, 217, 0, 0, 743, 0, 0, 0, 216, 0,
	747, 744, 0, 0, 0, 0, 0, 752, 401, 0,
	0, 0, 207, 655, 656, 717, 756, 0, 0, 217,
	0, 344, 344, 392, 393, 394, 395, 396, 397, 0,
	0, 0, 0, 0, 0, 545, 469, 344, 0, 0,
	545, 545, 0, 0, 545, 378, 379, 371, 372, 373,
	374, 375, 376, 377, 370, 0, 0, 380, 545, 545,
	545, 545, 0, 0, 0, 0, 682, 262, 261, 263,
	264, 265, 266, 545, 0, 267, 218, 0, 0, 67,
	0, 538, 0, 344, 0, 273, 36, 0, 62, 0,
	0, 0, 0, 0, 75, 558, 0, 71, 66, 740,
	369, 368, 378, 379, 371, 372, 373, 374, 375, 376,
	377, 370, 0, 712, 380, 58, 0, 0, 0, 0,
	0, 0, 36, 217, 0, 0, 581, 55, 0, 0,
	193, 0, 0, 0, 507, 208, 0, 516, 517, 518,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 530, 312, 315, 316, 317, 313, 0, 314, 318,
	742, 401, 0, 0, 0, 0, 741, 596, 344, 0,
	0, 0, 0, 52, 0, 54, 0, 545, 0, 56,
	0, 0, 0, 0, 61, 0, 70, 68, 72, 0,
	0, 545, 0, 0, 64, 371, 372, 373, 374, 375,
	376, 377, 370, 210, 0, 380, 0, 0, 0, 0,
	0, 60, 0, 65, 74, 69, 63, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 0, 210, 0, 0, 0, 210, 369, 368, 378,
	379, 371, 372, 373, 374, 375, 376, 377, 370, 0,
	0, 380, 0, 0, 0, 545, 0, 0, 0, 0,
	0, 469, 545, 368, 378, 379, 371, 372, 373, 374,
	375, 376, 377, 370, 614, 0, 380, 0, 344, 36,
	0, 0, 210, 0, 0, 610, 611, 612, 0, 0,
	0, 0, 0, 0, 323, 615, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 344, 0,
	342, 0, 0, 342, 0, 369, 368, 378, 379, 371,
	372, 373, 374, 375, 376, 377, 370, 0, 0, 380,
	0, 389, 0, 0, 0, 0, 691, 692, 0, 0,
	0, 695, 695, 695, 0, 0, 344, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 398, 0, 0, 402,
	403, 404, 405, 406, 407, 408, 0, 411, 413, 413,
	413, 413, 413, 413, 413, 413, 421, 422, 423, 424,
	0, 0, 0, 0, 344, 0, 667, 668, 0, 0,
	442, 0, 0, 0, 208, 208, 208, 208, 0, 217,
	0, 0, 734, 0, 735, 0, 0, 0, 0, 323,
	0, 0, 0, 0, 0, 0, 67, 208, 0, 540,
	0, 245, 0, 0, 342, 62, 0, 244, 0, 0,
	281, 75, 0, 0, 71, 66, 0, 0, 699, 342,
	274, 275, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 0, 219, 262, 261, 263, 264, 265, 266, 0,
	0, 267, 268, 269, 0, 0, 242, 255, 0, 280,
	0, 0, 0, 0, 0, 36, 0, 0, 0, 0,
	0, 726, 0, 0, 0, 0, 0, 0, 402, 252,
	253, 543, 0, 0, 0, 292, 0, 254, 0, 0,
	251, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 290, 0, 0, 0, 0,
	0, 61, 0, 70, 68, 72, 578, 0, 36, 0,
	0, 64, 0, 282, 291, 288, 289, 286, 287, 285,
	284, 283, 293, 276, 277, 279, 0, 278, 60, 0,
	65, 74, 69, 63, 73, 369, 368, 378, 379, 371,
	372, 373, 374, 375, 376, 377, 370, 0, 0, 380,
	342, 0, 0, 0, 0, 0, 166, 153, 127, 168,
	105, 119, 176, 120, 121, 147, 93, 135, 67, 117,
	0, 108, 89, 114, 90, 106, 129, 62, 132, 104,
	155, 138, 174, 75, 142, 0, 71, 66, 0, 0,
	131, 160, 133, 152, 126, 148, 98, 141, 169, 118,
	145, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 625, 144, 165, 116, 146, 88, 143, 0,
	91, 94, 175, 163, 111, 112, 0, 0, 0, 0,
	0, 0, 0, 130, 134, 149, 124, 0, 0, 0,
	0, 0, 0, 723, 0, 109, 0, 140, 0, 0,
	0, 95, 92, 128, 657, 658, 659, 97, 0, 110,
	150, 0, 161, 125, 177, 164, 123, 122, 167, 170,
	159, 107, 115, 61, 113, 70, 68, 72, 103, 162,
	156, 157, 158, 64, 0, 101, 102, 99, 100, 136,
	137, 171, 172, 173, 151, 96, 0, 0, 154, 139,
	60, 0, 65, 74, 69, 63, 73, 0, 0, 0,
	0, 208, 0, 0, 578, 0, 0, 690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 704, 0, 0, 709, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 36, 166, 153, 127,
	168, 105, 119, 176, 120, 121, 147, 93, 135, 67,
	117, 0, 108, 89, 114, 90, 106, 129, 62, 132,
	104, 155, 138, 174, 75, 142, 0, 71, 66, 0,
	0, 131, 160, 133, 152, 126, 148, 98, 141, 169,
	118, 145, 39, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 144, 165, 116, 146, 88, 143,
	0, 91, 94, 175, 163, 111, 112, 0, 0, 0,
	0, 0, 0, 0, 130, 134, 149, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 140, 0,
	0, 0, 95, 92, 128, 0, 0, 0, 97, 0,
	110, 150, 0, 161, 125, 177, 164, 123, 122, 167,
	170, 159, 107, 115, 61, 113, 70, 68, 72, 103,
	162, 156, 157, 158, 64, 0, 101, 102, 99, 100,
	136, 137, 171, 172, 173, 151, 96, 0, 0, 154,
	139, 60, 0, 65, 74, 69, 63, 73, 166, 153,
	127, 168, 105, 119, 176, 120, 121, 147, 93, 135,
	67, 117, 0, 108, 89, 114, 90, 106, 129, 62,
	132, 104, 155, 138, 174, 75, 142, 0, 71, 66,
	0, 0, 131, 160, 133, 152, 126, 148, 98, 141,
	169, 118, 145, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 165, 116, 146, 88,
	143, 0, 91, 94, 175, 163, 111, 112, 0, 0,
	0, 0, 0, 0, 0, 130, 134, 149, 124, 0,
	0, 0, 0, 0, 0, 672, 0, 109, 0, 140,
	0, 0, 0, 95, 92, 128, 0, 0, 0, 97,
	0, 110, 150, 0, 161, 125, 177, 164, 123, 122,
	167, 170, 159, 107, 115, 61, 113, 70, 68, 72,
	103, 162, 156, 157, 158, 64, 0, 101, 102, 99,
	100, 136, 137, 171, 172, 173, 151, 96, 0, 0,
	154, 139, 60, 0, 65, 74, 69, 63, 73, 166,
	153, 127, 168, 105, 119, 176, 120, 121, 147, 93,
	135, 67, 117, 0, 108, 89, 114, 90, 106, 129,
	62, 132, 104, 155, 138, 174, 75, 142, 0, 71,
	66, 0, 0, 131, 160, 133, 152, 126, 148, 98,
	141, 169, 118, 145, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 165, 116, 146,
	88, 143, 0, 91, 94, 175, 163, 111, 112, 0,
	0, 0, 0, 0, 0, 0, 130, 134, 149, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	140, 0, 0, 0, 95, 92, 128, 0, 0, 0,
	97, 0, 110, 150, 0, 161, 125, 177, 164, 123,
	122, 167, 170, 159, 107, 115, 61, 113, 70, 68,
	72, 103, 162, 156, 157, 158, 64, 0, 101, 102,
	99, 100, 136, 137, 171, 172, 173, 151, 96, 0,
	0, 154, 139, 60, 0, 65, 74, 69, 63, 73,
	166, 153, 127, 168, 105, 119, 176, 120, 121, 147,
	93, 135, 67, 117, 0, 108, 89, 114, 90, 106,
	129, 62, 132, 104, 155, 138, 174, 75, 142, 0,
	71, 66, 0, 0, 131, 160, 133, 152, 126, 148,
	98, 141, 169, 118, 145, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 165, 116,
	146, 88, 143, 0, 91, 94, 175, 163, 111, 112,
	0, 0, 0, 0, 0, 0, 0, 130, 134, 149,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 140, 0, 0, 0, 95, 92, 128, 0, 0,
	0, 97, 0, 110, 150, 0, 161, 125, 177, 164,
	123, 122, 167, 170, 159, 107, 115, 61, 113, 70,
	68, 72, 103, 162, 156, 157, 158, 64, 0, 101,
	102, 99, 100, 136, 137, 171, 172, 173, 151, 96,
	0, 0, 154, 139, 60, 0, 65, 74, 69, 63,
	73, 166, 153, 127, 168, 105, 119, 176, 120, 121,
	147, 93, 135, 67, 117, 0, 108, 89, 114, 90,
	106, 129, 62, 132, 104, 155, 138, 174, 75, 142,
	0, 71, 66, 0, 0, 131, 160, 133, 152, 126,
	148, 98, 141, 169, 118, 145, 0, 0, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 165,
	116, 146, 88, 143, 0, 91, 94, 175, 163, 111,
	112, 0, 0, 0, 0, 0, 0, 0, 130, 134,
	149, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 140, 0, 0, 0, 95, 92, 128, 0,
	0, 0, 97, 0, 110, 150, 0, 161, 125, 177,
	164, 123, 122, 167, 170, 159, 107, 115, 61, 113,
	70, 68, 72, 103, 162, 156, 157, 158, 64, 0,
	101, 102, 99, 100, 136, 137, 171, 172, 173, 151,
	96, 0, 0, 154, 139, 60, 0, 65, 74, 69,
	63, 73, 166, 153, 127, 168, 105, 119, 176, 120,
	121, 147, 93, 135, 67, 117, 0, 108, 89, 114,
	90, 106, 129, 62, 132, 104, 155, 138, 174, 75,
	142, 0, 71, 66, 0, 0, 131, 160, 133, 152,
	126, 148, 98, 141, 169, 118, 145, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	165, 116, 146, 88, 143, 0, 91, 94, 175, 163,
	111, 112, 0, 0, 0, 0, 0, 0, 0, 130,
	134, 149, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 140, 0, 0, 0, 95, 92, 128,
	0, 0, 0, 97, 0, 110, 150, 0, 161, 125,
	177, 164, 123, 122, 167, 170, 159, 107, 115, 61,
	113, 70, 68, 72, 103, 162, 156, 157, 158, 64,
	0, 101, 102, 99, 100, 136, 137, 171, 172, 173,
	151, 96, 0, 0, 154, 139, 60, 0, 65, 74,
	69, 63, 73, 67, 0, 0, 0, 0, 245, 0,
	0, 0, 62, 0, 244, 0, 0, 281, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 219,
	262, 261, 263, 264, 265, 266, 0, 0, 267, 268,
	269, 0, 0, 242, 255, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 543, 0,
	0, 0, 292, 0, 254, 0, 0, 251, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 290, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	282, 291, 288, 289, 286, 287, 285, 284, 283, 293,
	276, 277, 279, 0, 278, 60, 0, 65, 74, 69,
	63, 73, 67, 0, 0, 0, 0, 245, 0, 0,
	0, 62, 0, 244, 0, 0, 281, 75, 0, 0,
	71, 66, 0, 0, 0, 0, 274, 275, 0, 0,
	0, 0, 0, 0, 0, 39, 0, 236, 219, 262,
	261, 263, 264, 265, 266, 0, 0, 267, 268, 269,
	0, 0, 242, 255, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 0, 0, 0,
	0, 292, 0, 254, 0, 0, 251, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 290, 0, 0, 0, 0, 0, 61, 0, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 0, 282,
	291, 288, 289, 286, 287, 285, 284, 283, 293, 276,
	277, 279, 18, 278, 60, 0, 65, 74, 69, 63,
	73, 0, 0, 67, 0, 0, 0, 0, 245, 0,
	0, 0, 62, 0, 244, 0, 0, 281, 75, 0,
	0, 71, 66, 0, 0, 0, 0, 274, 275, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 219,
	262, 261, 263, 264, 265, 266, 0, 0, 267, 268,
	269, 0, 0, 242, 255, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 0, 0,
	0, 0, 292, 0, 254, 0, 0, 251, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 290, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	282, 291, 288, 289, 286, 287, 285, 284, 283, 293,
	276, 277, 279, 0, 278, 60, 0, 65, 74, 69,
	63, 73, 67, 0, 0, 0, 0, 245, 0, 0,
	0, 62, 0, 244, 0, 0, 281, 75, 0, 0,
	71, 66, 0, 0, 0, 0, 274, 275, 0, 0,
	0, 0, 0, 0, 0, 39, 0, 0, 219, 262,
	261, 263, 264, 265, 266, 0, 0, 267, 268, 269,
	0, 0, 242, 255, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 0, 0, 0,
	0, 292, 0, 254, 0, 0, 251, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 290, 0, 0, 0, 0, 0, 61, 0, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 0, 282,
	291, 288, 289, 286, 287, 285, 284, 283, 293, 276,
	277, 279, 67, 278, 60, 0, 65, 74, 69, 63,
	73, 62, 0, 0, 0, 0, 281, 75, 0, 0,
	71, 66, 0, 0, 0, 0, 274, 275, 0, 0,
	0, 0, 0, 0, 0, 39, 0, 0, 219, 262,
	261, 263, 264, 265, 266, 0, 0, 267, 268, 269,
	0, 0, 0, 255, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 0, 0, 0,
	0, 292, 0, 254, 0, 0, 251, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 290, 0, 0, 0, 0, 0, 61, 0, 70,
	68, 72, 0, 0, 0, 0, 0, 64, 0, 282,
	291, 288, 289, 286, 287, 285, 284, 283, 293, 276,
	277, 279, 0, 278, 60, 0, 65, 74, 69, 63,
	73, 67, 0, 0, 18, 621, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 67, 75, 0, 0, 71,
	66, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	75, 0, 0, 71, 66, 0, 0, 58, 0, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 357,
	356, 179, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 358, 75, 0, 0,
	71, 66, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 434, 0, 0, 435, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 70, 68,
	72, 177, 0, 0, 0, 0, 64, 0, 0, 0,
	61, 0, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 0, 0, 60, 0, 65, 74, 69, 63, 73,
	0, 0, 0, 0, 0, 0, 0, 60, 177, 65,
	74, 69, 63, 73, 0, 0, 0, 61, 0, 70,
	68, 72, 67, 0, 0, 0, 326, 64, 0, 0,
	0, 62, 0, 0, 0, 0, 67, 75, 0, 0,
	71, 66, 0, 0, 60, 62, 65, 74, 69, 63,
	73, 75, 0, 0, 71, 66, 0, 0, 179, 0,
	328, 0, 0, 0, 0, 0, 0, 0, 0, 39,
	67, 0, 179, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 67, 75, 0, 0, 71, 66,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 75,
	0, 0, 71, 66, 0, 0, 58, 0, 623, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	179, 0, 467, 0, 0, 0, 0, 61, 0, 70,
	68, 72, 177, 0, 0, 0, 0, 64, 0, 0,
	0, 61, 0, 70, 68, 72, 0, 0, 0, 0,
	0, 64, 0, 0, 60, 0, 65, 74, 69, 63,
	73, 0, 0, 0, 0, 0, 177, 0, 60, 0,
	65, 74, 69, 63, 73, 61, 0, 70, 68, 72,
	177, 0, 0, 0, 0, 64, 0, 0, 0, 61,
	0, 70, 68, 72, 0, 0, 0, 0, 0, 64,
	0, 0, 60, 0, 65, 74, 69, 63, 73, 0,
	0, 0, 0, 0, 0, 67, 60, 0, 65, 74,
	69, 63, 73, 305, 62, 0, 0, 0, 0, 0,
	75, 0, 0, 71, 66, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 0, 67,
	0, 179, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 67, 75, 0, 0, 71, 66, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 75, 0,
	0, 71, 66, 0, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 0, 58,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	0, 177, 75, 0, 0, 71, 66, 0, 0, 0,
	61, 0, 70, 68, 72, 0, 0, 0, 0, 0,
	64, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 60, 0, 65,
	74, 69, 63, 73, 61, 0, 70, 68, 72, 177,
	0, 0, 0, 0, 64, 0, 0, 0, 61, 0,
	70, 68, 72, 67, 0, 0, 0, 0, 64, 0,
	0, 60, 62, 65, 74, 69, 63, 73, 75, 0,
	0, 71, 66, 177, 0, 60, 0, 65, 74, 69,
	63, 73, 61, 0, 70, 68, 72, 0, 0, 179,
	0, 0, 64, 0, 0, 0, 0, 0, 18, 37,
	20, 21, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 65, 74, 69, 63, 73, 30, 0, 0, 0,
	0, 22, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	0, 0, 39, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	70, 68, 72, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 65, 74, 69,
	63, 73, 0, 0, 0, 0, 0, 0, 23, 24,
	26, 25, 27, 0, 0, 0, 0, 0, 0, 0,
	0, 28, 31, 32, 0, 0, 33, 34, 35, 0,
	364, 0, 367, 0, 0, 0, 0, 0, 381, 382,
	383, 384, 385, 386, 387, 38, 365, 366, 363, 369,
	368, 378, 379, 371, 372, 373, 374, 375, 376, 377,
	370, 0, 0, 380,
}

var yyPact = [...]int16{
	3662, -1000, -120, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 458, 477, -1000, -1000,
	-1000, -1000, -1000, 802, -24, -13, -16, -18, 2267, 3606,
	-1000, -1000, -1000, -1000, -1000, -1000, 274, -1000, -1000, -1000,
	-1000, -1000, 450, 456, 333, 444, 340, -1000, -57, 3269,
	3482, 3530, -61, -22, 3606, -95, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -19, 3606, -1000, 3606,
	-66, 141, -66, 3606, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 150, 421, 2825,
	2825, 458, -1000, 274, -1000, -1000, -1000, 400, -1000, -1000,
	109, 3448, 351, 853, -1000, -1000, -1000, 432, 3108, 3255,
	14, 3606, 43, -1000, 163, -1000, 65, -1000, 13, -1000,
	-1000, 3606, 85, 138, 1512, -51, 3606, 1512, -55, 3606,
	427, 270, 3606, -1000, -1000, -1000, -1000, -1000, 471, 47,
	188, -1000, 2825, 3723, -1000, 223, -1000, -1000, -2, -1000,
	-1000, 2955, 2955, 2955, 2955, 2955, 2955, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	223, 10, -1000, 2686, 223, 223, 223, 223, 223, 223,
	2825, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 189, -1000, 321, 450, 150, 340,
	3145, 243, -1000, -1000, 350, 3606, -1000, 3530, 3269, 3269,
	3269, 3269, -1000, 326, 318, -1000, 397, 390, 380, 3606,
	-1000, 265, 150, 3108, 39, -1000, 3317, -1000, -1000, 2116,
	466, 3269, 3606, -1000, -1000, 3530, 2825, 1965, 1512, 426,
	-69, -1000, -1000, -1000, -1000, -1000, 3606, 229, -1000, 3606,
	-1000, -1000, 3606, 1512, -1000, 370, 2825, 2825, 241, 2825,
	2825, 52, 2955, 116, 153, 2955, 2955, 2955, 2955, 2955,
	2955, 2955, 2955, 2955, 2955, 2955, 2955, 2955, 2955, 2955,
	29, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 274,
	753, 753, 27, 27, 27, 27, 27, 93, 1139, 1965,
	249, 78, 2686, 2406, 2406, 2825, 2825, 2406, 437, 74,
	78, 3496, -1000, 150, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2406, 2406, 2406, 2406, 2825, -1000, -1000, -1000, 421,
	-1000, 437, 455, -1000, 401, 377, 2406, -1000, 260, 3530,
	223, -1000, 142, -1000, 316, 853, 232, 493, -1000, -1000,
	-1000, -1000, 275, -1000, 259, -1000, -1000, -1000, -1000, -1000,
	150, -1000, -29, -39, -49, -1000, -1000, -1000, -1000, -1000,
	-1000, 458, 2825, 281, -1000, -1000, 78, -1000, 8, -1000,
	-1000, -1000, 207, 3496, 1512, -1000, 50, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 362, 52, 89,
	-1000, -1000, 187, -1000, -1000, 78, 78, 1209, -1000, -1000,
	-1000, -1000, 116, 2955, 2955, 2955, 891, 1209, 969, 697,
	916, 27, 104, 104, 36, 36, 36, 36, 36, 845,
	845, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 150,
	2406, 179, -1000, -1000, 3094, 6, 223, 2825, -1000, 224,
	224, 49, 195, 224, 2406, 92, -1000, 2825, 150, -1000,
	224, 150, 224, 224, -1000, -1000, 3606, -1000, -1000, -1000,
	-1000, 214, -1000, 420, 158, 169, -1000, -1000, 2545, 150,
	234, 2, 458, 2825, 2825, -1000, -1000, -1000, 223, 223,
	223, 450, 78, -1000, 1814, 3606, -1000, -1000, -1000, 3606,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	891, 1209, 428, -1000, 2955, 2955, -1000, 224, 2406, -1000,
	-1000, 3303, -1000, -1000, 1663, 2406, 78, -1000, -1000, 29,
	29, 29, -105, 238, 68, -1000, 2825, 206, -1000, -1000,
	-1000, -1000, -1000, -1000, 466, 3269, 418, -1000, 223, -1000,
	-1000, 312, 3496, 3496, 450, 78, 78, 3496, 3496, 3496,
	-1000, -1000, 1512, -1000, -1000, -1000, 2955, 1209, 1209, -1000,
	-1000, -1000, -1000, 1, 150, 150, 25, 150, 150, 223,
	-100, -1000, 78, 2825, 464, 176, 470, -1000, 223, -1000,
	274, -4, -1000, -1000, 211, -1000, 211, 211, -1000, 1209,
	1311, -1000, -1000, -1000, 119, -1000, 413, -1000, -1000, 2955,
	150, 117, 78, 461, 454, 3530, 169, 150, 3496, -1000,
	3496, -1000, -1000, -1000, 181, 29, 754, -1000, -1000, -1000,
	2825, 2825, 163, -1000, -1000, -1000, 17, 97, -1000, 150,
	-1, -112, 78, 161, -1000, 411, 150, -1000, 353, -108,
	-116, 29, -1000, -1000, 335, -1000, -1000, -110, -114, -117,
	-1000,
}

var yyPgo = [...]int16{
	0, 629, 64, 329, 628, 627, 625, 622, 621, 620,
	616, 615, 614, 613, 612, 611, 610, 608, 46, 607,
	605, 594, 26, 593, 35, 592, 591, 15, 76, 14,
	19, 169, 590, 10, 61, 54, 589, 587, 584, 34,
	583, 57, 582, 573, 571, 6, 23, 570, 569, 567,
	566, 33, 511, 565, 560, 558, 557, 556, 555, 24,
	2, 3, 18, 13, 553, 106, 22, 552, 21, 549,
	548, 547, 545, 16, 544, 29, 543, 8, 28, 541,
	27, 12, 32, 512, 326, 138, 510, 509, 508, 505,
	504, 503, 11, 1, 423, 9, 17, 502, 376, 20,
	499, 496, 495, 493, 88, 7, 4, 5, 491, 490,
	489, 825, 0, 487, 483, 107,
}

var yyR1 = [...]int8{
	0, 109, 110, 110, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 21, 21, 7,
	8, 8, 113, 113, 37, 37, 9, 10, 10, 10,
	10, 11, 11, 11, 11, 12, 13, 13, 13, 14,
	108, 108, 108, 15, 16, 17, 17, 17, 17, 17,
	17, 114, 18, 19, 19, 20, 20, 20, 24, 24,
	24, 22, 22, 23, 23, 29, 29, 28, 28, 30,
	30, 30, 30, 97, 97, 97, 96, 96, 32, 32,
	33, 33, 34, 34, 35, 35, 35, 43, 36, 36,
	36, 36, 103, 103, 102, 102, 102, 100, 100, 101,
	101, 38, 38, 38, 38, 39, 39, 39, 39, 40,
	40, 42, 42, 41, 41, 44, 44, 44, 44, 45,
	45, 46, 46, 31, 31, 31, 31, 31, 31, 31,
	48, 48, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 58, 58, 58, 58, 58, 58, 49, 49,
	49, 49, 49, 49, 49, 27, 27, 59, 59, 59,
	65, 60, 60, 106, 106, 106, 106, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 56, 56, 56,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 55,
	55, 55, 55, 55, 55, 55, 55, 115, 115, 57,
	57, 57, 57, 25, 25, 25, 25, 25, 107, 107,
	107, 107, 107, 107, 107, 107, 69, 69, 26, 26,
	67, 67, 68, 70, 70, 66, 66, 66, 51, 51,
	51, 51, 51, 51, 51, 53, 53, 53, 71, 71,
	72, 72, 73, 73, 74, 74, 75, 76, 76, 76,
	77, 77, 77, 77, 78, 78, 78, 50, 50, 50,
	50, 50, 50, 79, 79, 79, 79, 80, 80, 61,
	61, 63, 63, 62, 64, 81, 81, 82, 83, 83,
	85, 85, 86, 86, 84, 84, 87, 87, 87, 87,
	87, 87, 87, 88, 88, 88, 89, 89, 90, 90,
	90, 91, 91, 94, 94, 95, 95, 98, 98, 99,
	99, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 111, 112, 104,
	105, 105, 105,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 3, 5, 8, 4,
	6, 6, 7, 7, 4, 5, 4, 5, 5, 3,
	1, 1, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 5,
	5, 3, 0, 1, 0, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 1,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 2,
	4, 5, 7, 2, 4, 6, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -109, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -3, -4, 6, -21,
	8, 9, 29, 106, 107, 109, 108, 110, 119, 47,
	24, 120, 121, 124, 125, 126, -111, 7, 143, 50,
	-110, 156, -73, 14, -20, 5, -18, -114, -18, -18,
	-18, -18, 111, -90, 113, 65, 117, -94, 53, -93,
	149, 122, 26, 154, 132, 151, 36, 17, 125, 153,
	124, 35, 126, 155, 152, 32, -84, 113, 115, 111,
	111, 112, 113, 111, -108, 53, -92, -93, 66, 21,
	23, 69, 101, 15, 70, 100, 144, 106, 45, 136,
	137, 134, 135, 127, 28, 9, 24, 120, 20, 94,
	108, 73, 74, 123, 22, 121, 64, 18, 48, 10,
	12, 13, 116, 115, 85, 112, 43, 7, 102, 25,
	82, 39, 27, 41, 83, 16, 138, 139, 30, 148,
	96, 46, 33, 67, 62, 49, 65, 14, 44, 84,
	109, 143, 42, 6, 147, 29, 129, 130, 131, 119,
	40, 111, 128, 72, 114, 63, 5, 117, 8, 47,
	118, 140, 141, 142, 31, 71, 11, 113, -98, 53,
	-93, -104, -104, -104, -104, -104, -104, -2, -77, 16,
	15, -5, -3, -111, 6, 19, 20, -24, 37, 38,
	-19, -84, -33, -34, -35, -36, -43, -65, -111, -41,
	-98, 10, -37, -41, -81, -82, -66, -94, -98, 53,
	-93, -86, 116, 112, -41, 143, 111, -41, -41, -85,
	116, 53, -85, -41, -104, -112, 52, -78, 18, 30,
	-31, -47, 67, -52, 28, 22, -51, -48, -66, -64,
	-65, 101, 90, 91, 98, 68, 102, -56, -54, -55,
	-57, 55, 54, 56, 57, 58, 59, 62, 63, 64,
	-94, -98, -62, -111, 41, 42, 144, 145, 148, 146,
	70, 31, 134, 142, 141, 140, 138, 139, 136, 137,
	116, 135, 96, 143, -74, -75, -31, -73, -2, -18,
	33, -22, 20, 61, -42, 25, -41, 29, 51, -38,
	-39, -40, 39, 43, 45, 40, 41, 42, 46, -103,
	21, -33, -2, -111, -102, -100, 21, -98, 55, 103,
	-41, -113, 51, 10, 118, 51, 75, 103, -41, 67,
	53, -105, -111, -95, -94, -92, 113, -41, -105, 114,
	-41, 22, 49, -41, 8, 85, 66, 65, 82, 51,
	17, -31, -49, 85, 67, 83, 84, 69, 87, 86,
	97, 90, 91, 92, 93, 94, 95, 96, 88, 89,
	100, 75, 76, 77, 78, 79, 80, 81, -65, -111,
	104, 105, -52, -52, -52, -52, -52, -52, -111, 103,
	-60, -31, -111, -111, -111, -111, -111, -111, -111, -69,
	-31, -111, -115, -111, -115, -115, -115, -115, -115, -115,
	-115, -111, -111, -111, -111, 51, -76, 23, 24, -77,
	-112, -24, -53, -94, 56, 59, -23, 40, -50, 29,
	31, -2, -111, -41, -81, -34, -35, -34, -35, 39,
	39, 39, 44, 39, 44, 39, -39, -98, -112, -112,
	-2, -44, 47, 115, 48, -101, -98, 55, -99, -98,
	-92, -46, 11, -33, -41, -82, -31, -95, -99, -92,
	-105, 22, -91, 118, -41, -87, 109, 107, 28, 108,
	14, 144, 155, 53, -41, -41, -105, 35, -31, -31,
	-58, 62, 67, 63, 64, -31, -31, -52, -59, -62,
	-65, 60, 85, 83, 84, 69, -52, -52, -52, -52,
	-52, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-52, -106, 53, 55, 101, 122, -51, -51, -94, -29,
	20, -28, -30, 92, -31, -98, -95, 51, -112, -28,
	-28, -31, -31, -28, -22, -67, -68, 71, -94, -112,
	-28, -29, -28, -28, -75, -78, -83, 18, 10, 31,
	31, -28, -80, 49, -81, -61, -63, -62, -111, -2,
	-79, -94, -46, 49, 49, 39, 39, -112, 112, 112,
	112, -73, -31, -46, 103, 49, -94, -105, -104, -88,
	-89, 114, 21, 112, 27, 36, 62, 63, 64, -59,
	-52, -52, -52, -27, 123, 66, -112, -28, 51, -97,
	-96, 21, -94, 55, 103, -111, -31, -112, -112, 51,
	118, 21, -112, -28, -70, -68, 73, -31, -112, -112,
	-112, -112, -112, -41, -32, 10, 26, -80, 51, -112,
	-112, -112, 51, 103, -73, -31, -31, -111, -111, -111,
	-77, -95, -41, -41, -104, -27, 66, -52, -52, -112,
	-30, -96, 92, -99, -29, -107, -106, -106, -107, 149,
	-73, 74, -31, 72, -46, -33, 27, -63, 31, -2,
	-111, -94, -94, -77, -45, -94, -45, -45, -105, -52,
	103, -112, -112, 132, -111, -106, 133, -112, -112, -111,
	-26, 147, -31, -71, 12, 8, -61, -2, 103, -112,
	51, -112, -112, 92, 56, 29, -52, -112, 55, -72,
	13, 15, -81, -112, -94, -94, -112, 51, -106, -25,
	85, 152, -31, -60, -106, 133, 56, -112, 150, 46,
	153, 29, -112, 36, 151, 154, -106, 36, 152, 153,
	154,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 272, 0, 61, 61,
	61, 61, 61, 328, 314, 0, 0, 0, 0, 0,
	449, 449, 449, 449, 449, 449, 0, 27, 28, 447,
	1, 3, 280, 0, 0, 65, 68, 63, 314, 0,
	0, 0, 312, 0, 444, 0, 329, 330, 333, 334,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 445, 446, 0, 0, 315, 0,
	310, 0, 310, 0, 449, 50, 51, 52, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 444, 54, 337,
	338, 55, 56, 57, 58, 59, 60, 21, 284, 0,
	0, 272, 23, 0, 61, 66, 67, 71, 69, 70,
	62, 0, 0, 90, 92, 93, 94, 102, 0, 104,
	123, 0, 0, 34, 36, 305, 0, 255, 0, -2,
	-2, 0, 0, 0, 450, 0, 0, 450, 0, 0,
	0, 0, 0, 49, 53, 22, 448, 17, 0, 0,
	281, 133, 0, 138, 139, 0, 177, 178, 179, 180,
	181, 0, 0, 0, 0, 0, 0, 203, 204, 205,
	206, 258, 259, 260, 261, 262, 263, 264, 140, 141,
	255, 0, 304, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 227, 227, 227, 227, 227, 227, 227, 227,
	0, 0, 0, 0, 273, 274, 277, 280, 21, 68,
	0, 73, 72, 64, 0, 0, 122, 0, 0, 0,
	0, 0, 111, 0, 0, 114, 0, 0, 0, 0,
	103, 0, 21, 0, 125, 105, 0, 107, 108, 0,
	131, 0, 0, 32, 33, 0, 0, 0, 450, 0,
	331, 39, 451, 452, 335, 336, 0, 0, 44, 0,
	46, 311, 0, 450, 285, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 158, 159, 160, 161, 162, 163, 164, 151, 0,
	0, 0, 197, 198, 199, 200, 201, 0, 75, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 71, 0,
	247, 0, 219, 0, 220, 221, 222, 223, 224, 225,
	226, 0, 75, 0, 0, 0, 276, 278, 279, 284,
	24, 71, 0, 265, 0, 0, 0, 74, 297, 0,
	0, -2, 0, 121, 131, 91, 98, 0, 101, 112,
	113, 115, 0, 117, 0, 119, 120, 95, 96, 170,
	21, 97, 0, 0, 0, 106, 109, 110, 124, 339,
	340, 272, 0, 131, 35, 306, 307, 256, 0, -2,
	37, 313, 0, 0, 450, 449, 323, 316, 317, 318,
	319, 320, 321, 322, 45, 47, 48, 0, 134, 135,
	137, 152, 0, 154, 156, 282, 283, 142, 143, 167,
	168, 169, 0, 0, 0, 0, 165, 147, 0, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 196, 173, 174, 175, 176, 194, 195, 202, 0,
	0, 76, 77, 79, 83, 0, 256, 0, 303, 0,
	0, 0, 0, 0, 0, 253, 250, 0, 0, 228,
	0, 0, 0, 0, 275, 18, 0, 308, 309, 266,
	267, 88, 25, 0, 297, 287, 299, 301, 0, 21,
	0, 293, 272, 0, 0, 116, 118, -2, 0, 0,
	0, 280, 132, 31, 0, 0, 332, 40, 41, 0,
	449, 324, 325, 326, 327, 286, 153, 155, 157, 144,
	165, 148, 0, 145, 0, 0, 207, 0, 0, 80,
	84, 0, 86, 87, 0, 75, 172, 210, 211, 0,
	0, 0, 0, 272, 0, 251, 0, 0, 218, 229,
	230, 231, 232, 19, 131, 0, 0, 26, 0, 302,
	-2, 0, 0, 0, 280, 99, 100, 0, 0, 0,
	30, 257, 450, 42, 43, 146, 0, 166, 149, 208,
	78, 85, 81, 0, 0, 0, 238, 0, 0, 0,
	248, 217, 254, 0, 268, 89, 0, 300, 0, -2,
	0, 295, 294, 29, 0, 129, 0, 0, 38, 150,
	0, 209, 212, 239, 0, 243, 0, 214, 213, 0,
	0, 0, 252, 270, 0, 0, 290, 21, 0, 126,
	0, 127, 128, 82, 0, 0, 233, 216, 249, 20,
	0, 0, 298, -2, 296, 130, 240, 0, 244, 0,
	0, 0, 271, 269, 241, 0, 0, 215, 0, 0,
	0, 0, 245, 234, 0, 237, 242, 235, 0, 0,
	236,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 156,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:216
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:221
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:222
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:226
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:244
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:252
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:256
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:263
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:269
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:273
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:279
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:283
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:290
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:301
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:313
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:317
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:323
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:329
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:333
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:338
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:339
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:343
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:347
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:353
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:359
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:363
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:368
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:372
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:378
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:382
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:387
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:392
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:398
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:404
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:412
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:417
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:427
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:433
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:437
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:452
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:464
		{
			yyVAL.statement = &OtherRead{}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:468
		{
			yyVAL.statement = &OtherRead{}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:472
		{
			yyVAL.statement = &OtherRead{}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:476
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:489
		{
			setAllowComments(yylex, true)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:493
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:499
		{
			yyVAL.bytes2 = nil
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:503
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:509
		{
			yyVAL.str = UnionStr
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:513
		{
			yyVAL.str = UnionAllStr
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:517
		{
			yyVAL.str = UnionDistinctStr
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:522
		{
			yyVAL.str = ""
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:526
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:530
		{
			yyVAL.str = SQLCacheStr
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:535
		{
			yyVAL.str = ""
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:539
		{
			yyVAL.str = DistinctStr
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:544
		{
			yyVAL.str = ""
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:548
		{
			yyVAL.str = StraightJoinHint
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:553
		{
			yyVAL.selectExprs = nil
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:557
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:563
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:567
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:577
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:581
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:585
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:590
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:594
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:605
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:610
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:614
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:620
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:624
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:634
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:638
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:642
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:648
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:661
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:665
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:669
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:673
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:678
		{
			yyVAL.empty = struct{}{}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:680
		{
			yyVAL.empty = struct{}{}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:683
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:691
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:698
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.tableIdent = NewTableIdentAs(string(yyDollar[1].bytes))
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:711
		{
			yyVAL.str = JoinStr
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:715
		{
			yyVAL.str = JoinStr
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:719
		{
			yyVAL.str = JoinStr
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.str = StraightJoinStr
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:729
		{
			yyVAL.str = LeftJoinStr
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:733
		{
			yyVAL.str = LeftJoinStr
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:737
		{
			yyVAL.str = RightJoinStr
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:741
		{
			yyVAL.str = RightJoinStr
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:747
		{
			yyVAL.str = NaturalJoinStr
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:751
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:761
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:771
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:775
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:780
		{
			yyVAL.indexHints = nil
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:784
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:788
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:792
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:798
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:802
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:807
		{
			yyVAL.expr = nil
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:811
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:817
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:829
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:833
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:837
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.expr = &Default{}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:857
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:861
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:865
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:869
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:873
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:877
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:881
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:885
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:889
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:893
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.str = IsNullStr
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:903
		{
			yyVAL.str = IsNotNullStr
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.str = IsTrueStr
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:911
		{
			yyVAL.str = IsNotTrueStr
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.str = IsFalseStr
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:919
		{
			yyVAL.str = IsNotFalseStr
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.str = EqualStr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.str = LessThanStr
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.str = GreaterThanStr
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.str = LessEqualStr
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.str = GreaterEqualStr
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.str = NotEqualStr
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:954
		{
			yyVAL.expr = nil
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:958
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:964
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:968
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:972
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:978
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:988
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:994
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:998
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1002
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1006
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1012
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1016
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1020
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1024
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1028
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1032
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1036
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1040
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1044
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1048
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1052
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1056
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1060
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1064
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1068
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1072
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1076
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1080
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1084
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1088
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1092
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1096
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1122
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1126
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1144
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1148
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1152
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1162
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1166
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1170
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1174
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1178
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 215:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1182
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1186
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 217:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1190
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1194
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1204
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1208
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1212
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1216
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1221
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1226
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1236
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1250
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1254
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1258
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1262
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = ""
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = BooleanModeStr
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 236:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1280
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1284
		{
			yyVAL.str = QueryExpansionStr
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1295
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1299
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1303
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 242:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1307
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1311
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1315
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1319
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1324
		{
			yyVAL.expr = nil
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1328
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1333
		{
			yyVAL.str = string("")
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1337
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1343
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1347
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1353
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1358
		{
			yyVAL.expr = nil
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1362
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1368
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1372
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1376
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1382
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1386
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1390
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1394
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1398
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1402
		{
			v := NewValArg(yyDollar[1].bytes)
			v.Seq = yylex.(*Tokenizer).posVarIndex
			yyVAL.expr = v
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
			yyVAL.expr = &NullVal{}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1414
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1423
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1427
		{
			v := NewValArg(yyDollar[1].bytes)
			v.Seq = yylex.(*Tokenizer).posVarIndex
			yyVAL.expr = v
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1434
		{
			yyVAL.exprs = nil
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1438
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1443
		{
			yyVAL.expr = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1447
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1452
		{
			yyVAL.orderBy = nil
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1456
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1462
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1466
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1472
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1477
		{
			yyVAL.str = AscScr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1481
		{
			yyVAL.str = AscScr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1485
		{
			yyVAL.str = DescScr
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1490
		{
			yyVAL.limit = nil
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1494
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1498
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1502
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1507
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1511
		{
			yyVAL.str = ForUpdateStr
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1515
		{
			yyVAL.str = ShareModeStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1528
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1532
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1536
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1541
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1545
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1549
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1556
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1560
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1564
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1568
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1573
		{
			yyVAL.updateExprs = nil
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1577
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1583
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1587
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1593
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1597
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1603
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1609
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1623
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1629
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1638
		{
			yyVAL.byt = 0
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1640
		{
			yyVAL.byt = 1
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1643
		{
			yyVAL.empty = struct{}{}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1645
		{
			yyVAL.empty = struct{}{}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1648
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1650
		{
			yyVAL.str = IgnoreStr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.empty = struct{}{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1656
		{
			yyVAL.empty = struct{}{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1658
		{
			yyVAL.empty = struct{}{}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1660
		{
			yyVAL.empty = struct{}{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.empty = struct{}{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1664
		{
			yyVAL.empty = struct{}{}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1666
		{
			yyVAL.empty = struct{}{}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1669
		{
			yyVAL.empty = struct{}{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1671
		{
			yyVAL.empty = struct{}{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1673
		{
			yyVAL.empty = struct{}{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1677
		{
			yyVAL.empty = struct{}{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.empty = struct{}{}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1682
		{
			yyVAL.empty = struct{}{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			yyVAL.empty = struct{}{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1686
		{
			yyVAL.empty = struct{}{}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1689
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1691
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1695
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1699
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1712
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1716
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1854
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			decNesting(yylex)
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1868
		{
			forceEOF(yylex)
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1873
		{
			forceEOF(yylex)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			forceEOF(yylex)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
