#!/bin/bash

export GIN_MODE=release
export PID_FILE=var/pid
mkdir -p var

#set -x #echo on
pidFile=${PID_FILE}
app={{.BinName}}

moreArgs="${*:2}"

function check_pid() {
  # pid文件存在的话，从pid文件中读取pid
  if [[ -f ${pidFile} ]]; then
    local pid=$(cat ${pidFile})
    # 如果pid存在，并且是数字的话，检查改pid的进程是否存在
    if [[ ${pid} =~ ^[0-9]+$ ]] && [[ $(ps -p "${pid}" | grep -v "PID TTY" | wc -l) -gt 0 ]]; then
      echo "${pid}"
      return 1
    fi
  fi

  # remove prefix ./
  local pureAppName=${app#"./"}
  local pid=$(ps -ef | grep "\b${pureAppName}\b" | grep -v grep | awk '{print $2}')
  # make sure that pid is a number.
  if [[ ${pid} =~ ^[0-9]+$ ]]; then
    echo "${pid}" >${pidFile}
    echo "${pid}"
    return 1
  fi

  echo "0"
  return 0
}

function start() {
  local pid=$(check_pid)
  if [[ ${pid} -gt 0 ]]; then
    echo -n "$app now is running already, pid=$pid"
    return 1
  fi

  nohup ${app} {{.BinArgs}} ${moreArgs} >/dev/null 2>&1 &
  sleep 1
  if [[ $(ps -p $! | grep -v "PID TTY" | wc -l) -gt 0 ]]; then
    local pid=$!
    echo $pid >${pidFile}
    echo "$app started..., pid=$pid"

    local pureAppName=${app#"./"}

    # 以下代码需要root权限
    # LIMIT_MEM=3G
    # LIMIT_MEM=256M
    # k or K for kilobytes, m or M for megabytes, and g or G for gigabytes.
    # https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/resource_management_guide/sec-memory
    if [[ -n "$LIMIT_MEM" ]]; then
      # 限制最大使用内存
      # 内核要考虑页对齐, 所以生效的数量不一定完全等于设置的数量
      local cgMemDir=/sys/fs/cgroup/memory/${pureAppName}
      mkdir -p $cgMemDir

      local mem=$LIMIT_MEM
      echo "$mem" >$cgMemDir/memory.limit_in_bytes
      echo "memory.limit_in_bytes=$mem"
      echo $pid >$cgMemDir/tasks
    fi
    # LIMIT_CPU=30 LIMIT_CORES=2 ./ctl start
    if [[ -n "$LIMIT_CPU" ]]; then
      local percentage=$LIMIT_CPU
      local cores=${LIMIT_CORES:-$(nproc)}
      echo "cpu percentage=$percentage"
      echo "cpu cores=$cores"
      local period=1000000
      local quota=$((period * cores * percentage / 100))

      local cgCpuDir=/sys/fs/cgroup/cpu/${pureAppName}
      mkdir -p $cgCpuDir
      echo $pid >$cgCpuDir/tasks
      echo $period >$cgCpuDir/cpu.cfs_period_us
      echo "cpu.cfs_period_us=$period"
      echo $quota >$cgCpuDir/cpu.cfs_quota_us
      echo "cpu.cfs_quota_us=$quota"
    fi
    return 0
  else
    echo "$app failed to start."
    return 1
  fi
}

function reload() {
  local pid=$(check_pid)
  if [[ ${pid} -gt 0 ]]; then
    kill -USR2 "${pid}"
  fi
  sleep 1
  local newPid=$(check_pid)
  echo "${app} ${pid} updated to ${newPid}"
}

function stop() {
  local pid=$(check_pid)
  if [[ ${pid} -gt 0 ]]; then
    kill "${pid}"
    rm -f ${pidFile}
  fi
  echo "${app} ${pid} stopped..."
}

function status() {
  local pid=$(check_pid)
  if [[ ${pid} -gt 0 ]]; then
    echo "${app} started, pid=$pid"
  else
    echo "${app} stopped!"
  fi
}

function tailLog() {
  local ba=$(basename ${app})

  if [[ $(id -u) == 0 ]]; then
    tail -F /var/logs/${ba}/${ba}.log
  else
    tail -F ~/logs/${ba}/${ba}.log
  fi
}

if [[ "$1" == "stop" ]]; then
  stop
elif [[ "$1" == "start" ]]; then
  start
elif [[ "$1" == "restart" ]]; then
  stop
  sleep 1
  start
elif [[ "$1" == "reload" ]]; then
  reload
elif [[ "$1" == "status" ]]; then
  status
elif [[ "$1" == "tail" ]]; then
  tailLog
else
  echo "$0 start|stop|restart|reload|status|tail"
  echo "root# LIMIT_MEM=1G $0 start"
  echo "root# LIMIT_CPU=20 $0 start to limit 20% for all cores"
  echo "root# LIMIT_CPU=20 LIMIT_CORES=2 $0 start to limit 20% for only 2 cores"
fi
